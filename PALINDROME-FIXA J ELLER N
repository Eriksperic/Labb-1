#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <ctype.h>
int isPalindrome(char inputString[]);
void backwards(char string[]);
int stringLength(char string[]);
void copyString(char Target[], char Source[]);
int removeSpacesandSymbols(char input[]);
void UPPERCASEtolowercase(char lowercased[]);
int stringCompare(char normal[], char reverse[], int length);

int main(void){

    int checkpalindrome;
    char tryagain = 'j';

    while(tryagain == 'j') {
    char textstring[100];




        fgets(textstring, 100, stdin);

        checkpalindrome = isPalindrome(textstring);

        if(checkpalindrome == 1){

            printf("The input string is a palindrome! \n");
        }

        else{

            printf("The input string is NOT a palindrome! \n");

        }




        printf("Would you like to enter another text string? j/n: ");
        scanf("%c", &tryagain);


           }





    return 0;
}


// Funktion som skriver arrayen baklänges! (GÖR KOPIERING AV STRÄNG FÖRE DENNA)
void backwards(char string[]){

    char reverseString[100];
    int i, length = 0;

    for (i = 0; string[i] != '\0'; i++) {
        length++;

    }
    for (i = 0; i < length; i++) {
        reverseString[i] = string[length - i - 1];

    }
    for ( i = 0; i < length; i++){
        string[i] = reverseString[i];
    }
}



// Funktion som returnerar en char-strängs längd.
int stringLength(char string[]){
    int length = 0, i;

    for (i = 0; string[i] != '\0'; i++) {
        length++;

    }

    return length;
}

// Funktion som kopierar en sträng till en annan. OCH TAR BORT NEWLINE'N SOM BJÖD IN SIG SJÄLV.
void copyString(char Target[], char Source[]){

    int i;
    for (i = 0; Source[i] != '\0'; i++) {
        Target[i] = Source[i];
    }

    Target[i-1] = '\0';

}


// Funktion som tar bort mellanslag och de flesta symboler från en textsträng!
int removeSpacesandSymbols(char input[]){
    int i, moveback = 0, newlength;
    char kopieradArr[100];

    for(i = 0; input[i] != '\0'; i++){
        if(input[i] > 'A' ){         // Ascii-värden under 'A'(65) är ej bokstäver.
            kopieradArr[moveback] = input[i];
            moveback++;

        }


    }

    for (i = 0; input[i] != '\0'; i++) {
        input[i] = kopieradArr[i];
    }

    newlength = stringLength(input);

    return newlength;

    }

// Funktion som omvandlar versaler till gemener i en textsträng.
void UPPERCASEtolowercase(char lowercased[]){


    int i = 0;
    for (i = 0; lowercased[i] != '\0'; i++) {
        if (lowercased[i] >= 'A' && lowercased[i] <= 'Z') {
            lowercased[i] = lowercased[i] +  32;
        }
    }
}


int stringCompare(char normal[], char reverse[], int length){
    int i, checker = 0;

    for(i = 0; i != length; i++){
            if(normal[i] == reverse[i]){

                checker++;
            }
    }

    if(checker == length){

        return 1;

    }
    else{

        return 0;
    }

}







// Funktion som avgör om den inmatade textsträngen är ett palindrom eller ej.
// HA I ÅTANKE ATT INPUTSTRING HAR NEWLINE I SLUTET!
 int isPalindrome(char inputString[]){

    int length, check = 0;
     char reverseString[100], inputStringEdited[100];

     copyString(reverseString, inputString);
     copyString(inputStringEdited, inputString);
     backwards(reverseString);
     length = stringLength(inputStringEdited);
     printf("Reverse: %s \n", reverseString);
     printf("Normal: %s \n", inputStringEdited);
     printf("Length: %d \n", length);
     UPPERCASEtolowercase(reverseString);
     UPPERCASEtolowercase(inputStringEdited);
     printf("LOWERCASED: %s \n", reverseString);
     removeSpacesandSymbols(inputStringEdited);
     length = removeSpacesandSymbols(reverseString);
     printf("DONE REVERSE: %s \n", reverseString);
     printf("DONE NORMAL: %s \n", inputStringEdited);
     printf("newlength: %d \n", length);

     check = stringCompare(inputStringEdited, reverseString, length);

     printf("Check: %d \n", check);





     return check;
}

